Урок 2: ConfigMaps и Secrets

Цель урока: научиться работать с ConfigMaps и Secrets для хранения конфигураций и секретных данных.

Создание ConfigMap
Создайте файл configmap.yaml с содержимым:
yaml
Copy code
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-app-config
data:
  app-config.json: |
    {
      "apiUrl": "https://api.example.com",
      "logLevel": "info"
    }
Запустите команду для создания ConfigMap:

Copy code
kubectl apply -f configmap.yaml
Создание Secret
Создайте файл secret.yaml с содержимым:
yaml
Copy code
apiVersion: v1
kind: Secret
metadata:
  name: my-app-secret
type: Opaque
data:
  api-key: c2VjcmV0LWFwaS1rZXkK
Запустите команду для создания Secret:

Copy code
kubectl apply -f secret.yaml
Использование ConfigMap и Secret в Deployment
Обновите файл my-app-deployment.yaml из урока 1, добавив envFrom и env в контейнер:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  replicas: 1 # количество реплик пода, которые должны быть созданы
  selector:
    matchLabels:
      app: my-app # метки для выбора подов, управляемых этим развертыванием
  template:
    metadata:
      labels:
        app: my-app # метки, применяемые к поду
    spec:
      containers:
        - name: my-app # имя контейнера
          image: my-app-image:latest # образ, который должен быть запущен в контейнере
          ports:
            - containerPort: 3000 # порт, который должен быть открыт в контейнере
          envFrom:
            - configMapRef:
                name: my-app-config # ссылка на ConfigMap, из которого будут получены переменные окружения
          env:
            - name: API_KEY # имя переменной окружения
              valueFrom:
                secretKeyRef:
                  name: my-app-secret # ссылка на Secret, из которого будет получено значение переменной окружения
                  key: api-key # имя ключа в Secret, соответствующего переменной окружения
Запустите команду для обновления Deployment:
kubectl apply -f my-app-deployment.yaml

Теперь ваше приложение будет использовать конфигурации из ConfigMap и Secret.

4. Обновление ConfigMap и Secret
Чтобы обновить ConfigMap или Secret, измените соответствующий файл и выполните команду `kubectl apply`. Затем выполните команду для обновления Deployment, чтобы применить изменения:

kubectl rollout restart deployment my-app

5. Удаление ConfigMap и Secret
Чтобы удалить ConfigMap или Secret, выполните следующие команды:

kubectl delete configmap my-app-config
kubectl delete secret my-app-secret


Обратите внимание,что при удалении ConfigMap или Secret, приложение, использующее их, может столкнуться с проблемами, поскольку ожидаемые конфигурации и секретные данные будут отсутствовать.

Важно следить за зависимостями между ресурсами и избегать удаления тех, которые активно используются.

В этом уроке вы научились создавать, использовать и управлять ConfigMaps и Secrets в Kubernetes. Эти механизмы позволяют хранить конфигурационные данные и секретные ключи безопасно и эффективно. На следующем уроке мы рассмотрим работу с хранилищами в Kubernetes и создание Persistent Volumes для сохранения данных между перезапусками контейнеров.
