Введение в Kubernetes (k8s):
Kubernetes - это система оркестрации контейнеров с открытым исходным кодом, предназначенная для автоматизации развертывания, масштабирования и управления приложениями, запущенными в контейнерах.

Основные понятия:
Node (узел): физический или виртуальный сервер, на котором работают контейнеры.
Pod (под): наименьшая и простейшая единица в Kubernetes, состоящая из одного или нескольких контейнеров.
Service (сервис): абстракция, представляющая стабильный IP-адрес и порт, по которым можно обратиться к подам.
Установка и настройка kubectl:
Kubectl - это командная строка Kubernetes, которая позволяет выполнять команды и управлять кластером Kubernetes. Вам необходимо установить kubectl на вашем локальном компьютере для взаимодействия с кластером.

Установка kubectl (Linux):
bash
Copy code
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
chmod +x kubectl
sudo mv kubectl /usr/local/bin/
Установка kubectl (macOS):
bash
Copy code
brew install kubectl
Установка kubectl (Windows):
powershell
Copy code
choco install kubernetes-cli
Подключение к кластеру Kubernetes:
Чтобы использовать kubectl, вам необходимо подключиться к кластеру Kubernetes. Если вы используете облачный провайдер, например, Google Kubernetes Engine (GKE) или Amazon Elastic Kubernetes Service (EKS), следуйте инструкциям по настройке доступа к вашему кластеру.
Развертывание простого приложения:
Для развертывания приложения в Kubernetes, создайте файл my-app-deployment.yaml со следующим содержимым:

yaml
Copy code
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-container
        image: nginx:latest
        ports:
        - containerPort: 80
Этот файл определяет развертывание, которое создает два пода с контейнерами, запускающими образ Nginx.

Примените файл развертывания, выполнив следующую команду:

bash
Copy code
kubectl apply -f my-app-deployment.yaml
Создание сервиса:
Чтобы предоставить доступ к вашему приложению извне, вам нужно создать сервис. Создайте файл my-app-service.yaml со следующим содержимым:

yaml
Copy code
apiVersion: v1
kind: Service
metadata:
  name: my-app-service
spec:
  selector:
    app: my-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
Примените файл сервиса, выполнив следующую команду:

bash
Copy code
kubectl apply -f my-app-service.yaml
Проверка статуса развертывания и сервиса:
Чтобы проверить статус развертывания и сервиса, выполните следующие команды:

bash
Copy code
kubectl get deployments
kubectl get services
Это покажет информацию о вашем развертывании и сервисе, включая количество реплик и IP-адреса.

Обновление приложения:
Если вы хотите обновить образ контейнера или изменить количество реплик, вы можете обновить файл my-app-deployment.yaml и повторно применить его:

bash
Copy code
kubectl apply -f my-app-deployment.yaml
Kubernetes автоматически обновит развертывание с новыми параметрами.

Удаление развертывания и сервиса:
Если вам необходимо удалить развертывание и сервис, выполните следующие команды:

bash
Copy code
kubectl delete -f my-app-deployment.yaml
kubectl delete -f my-app-service.yaml

10. Работа с kubectl:

Вот несколько основных команд kubectl, которые могут быть полезны при работе с Kubernetes:

- Получение информации о ресурсах:

```bash
kubectl get nodes
kubectl get pods
kubectl get services
kubectl get deployments
Получение дополнительной информации о ресурсе:
bash
Copy code
kubectl describe pod <pod_name>
kubectl describe service <service_name>
kubectl describe deployment <deployment_name>
Просмотр логов контейнера:
bash
Copy code
kubectl logs <pod_name> -c <container_name>
Запуск команды внутри контейнера:
bash
Copy code
kubectl exec -it <pod_name> -c <container_name> -- <command>
Масштабирование развертывания:
bash
Copy code
kubectl scale deployment <deployment_name> --replicas=<number_of_replicas>
Обновление образа контейнера в развертывании:
bash
Copy code
kubectl set image deployment/<deployment_name> <container_name>=<new_image>
Получение yaml-конфигурации ресурса:
bash
Copy code
kubectl get deployment <deployment_name> -o yaml
