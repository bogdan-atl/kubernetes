---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-app
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - image: nginx:1.12
        name: nginx
        ports:
        - containerPort: 80
        readinessProbe: # готово ли приложение принимать трафик
          failureThreshold: 3 # колличество попыток которые могут быть провалены
          httpGet: # проверка http запросом
            path: /
            port: 80
          periodSeconds: 10 # с какой периодичностью делать проверку
          successThreshold: 1 # сколько должно быть успешных проверок что бы обнулить failureThreshold
          timeoutSeconds: 1 # таймаут на проверки
        livenessProbe: # убедится что наше приложение живо и работает
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
          initialDelaySeconds: 10 # на какле колличество секунд просле запуска приложения нужно отсрочить проверку
        startupProbe: # запустилось ли наше приложние
          httpGet:
            path: /
            port: 80
          failureThreshold: 30 # колличество сбойных попыток
          periodSeconds: 10 # каждые 10 секунд проверять HealhChech
        resources:
          requests:
            cpu: 50m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: data
          mountPath: /files # куда примонтировать
      volumes:
      - name: data
        hostPath:
          path: /data_pod # какой каталог нужно примонтировать внутрь контейнера
...
